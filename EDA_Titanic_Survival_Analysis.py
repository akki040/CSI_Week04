# -*- coding: utf-8 -*-
"""Assignment4

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_6nk7pIXda7NBwXw_R2X71DpMUfddkYp

# Dataset Metadata

**Source:** `seaborn.load_dataset('titanic')`  
**Rows:** 891  
**Columns:** 15  

#### Column Descriptions:

| Column         | Description                                           |
|----------------|-------------------------------------------------------|
| survived       | Survival (0 = No, 1 = Yes)                            |
| pclass         | Ticket class (1 = 1st, 2 = 2nd, 3 = 3rd)              |
| sex            | Gender of the passenger                              |
| age            | Age in years                                          |
| sibsp          | Number of siblings/spouses aboard                    |
| parch          | Number of parents/children aboard                    |
| fare           | Passenger fare                                        |
| embarked       | Port of Embarkation (C = Cherbourg, Q = Queenstown)  |
| class          | Categorical representation of ticket class           |
| who            | man/woman/child                                      |
| deck           | Deck letter                                           |
| embark_town    | Embarkation town                                      |
| alive          | Survival (yes/no)                                     |
| alone          | Whether passenger was alone                           |

# 1. **Load the Dataset**
"""

import seaborn as sns
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

# Load Titanic dataset
titanic_data = sns.load_dataset('titanic')

# Display first few rows
titanic_data.head()

"""# 2. Data Summary and Missing Values"""

# Shape and column info
print("Shape of the dataset:", titanic_data.shape)
print("\nColumns:\n", titanic_data.columns)

# Check missing values
print("\nMissing values:\n", titanic_data.isnull().sum())

# Data types and summary
print("\nData types:\n", titanic_data.dtypes)
print("\nSummary Statistics:\n", titanic_data.describe(include='all'))

# Visualize missing values
plt.figure(figsize=(10, 6))
sns.heatmap(titanic_data.isnull(), cbar=False, cmap='viridis', yticklabels=False)
plt.title('Missing Values Heatmap')
plt.show()

"""# Impute Missing Values with ML"""

from sklearn.experimental import enable_iterative_imputer
from sklearn.impute import IterativeImputer
from sklearn.ensemble import RandomForestRegressor

# Make a copy
titanic_data_filled = titanic_data.copy()

# Separate features
numerical_cols = titanic_data_filled.select_dtypes(include=['number']).columns
categorical_cols = titanic_data_filled.select_dtypes(exclude=['number']).columns

# Fill numeric using IterativeImputer
imputer = IterativeImputer(estimator=RandomForestRegressor(), random_state=0)
titanic_data_filled[numerical_cols] = imputer.fit_transform(titanic_data_filled[numerical_cols])

# Fill categorical with mode
for col in categorical_cols:
    titanic_data_filled[col] = titanic_data_filled[col].fillna(titanic_data_filled[col].mode()[0])

# Check again
print("\nMissing values after imputation:\n", titanic_data_filled.isnull().sum())

"""# 3. Univariate Analysis"""

# Survived
sns.countplot(x='survived', data=titanic_data_filled)
plt.title('Survival Count')
plt.show()

# Pclass
sns.countplot(x='pclass', data=titanic_data_filled)
plt.title('Passenger Class Distribution')
plt.show()

# Age
sns.histplot(x='age', data=titanic_data_filled, kde=True)
plt.title('Age Distribution')
plt.show()

# Sex
sns.countplot(x='sex', data=titanic_data_filled)
plt.title('Sex Distribution')
plt.show()

"""# 4. Bivariate Analysis"""

# Survival by gender
sns.countplot(x='sex', hue='survived', data=titanic_data_filled)
plt.title('Survival by Gender')
plt.show()

# Survival by class
sns.countplot(x='pclass', hue='survived', data=titanic_data_filled)
plt.title('Survival by Class')
plt.show()

# Create age groups
titanic_data_filled['age_group'] = pd.cut(titanic_data_filled['age'], bins=[0,18,65,100], labels=['Child','Adult','Senior'])
sns.countplot(x='age_group', hue='survived', data=titanic_data_filled)
plt.title('Survival by Age Group')
plt.show()

# Survival by gender and class
sns.catplot(x='sex', hue='survived', col='pclass', kind='count', data=titanic_data_filled)
plt.suptitle('Survival by Gender and Class', y=1.05)
plt.show()

"""# 5. Insights from Analysis

- **Gender:** Women had higher survival rates.
- **Class:** 1st-class passengers were more likely to survive.
- **Age:** Children had better survival odds.

# 6. Survival Analysis
"""

# Embarkation Point
sns.countplot(x='embarked', hue='survived', data=titanic_data, palette='Spectral')
plt.title('Survival by Embarkation Point')
plt.show()

# Fare distribution
sns.histplot(titanic_data, x='fare', hue='survived', bins=20, kde=True, palette='viridis')
plt.title('Fare Distribution by Survival')
plt.show()

# Family Size
titanic_data['family_size'] = titanic_data['sibsp'] + titanic_data['parch']
sns.countplot(x='family_size', hue='survived', data=titanic_data, palette='cubehelix')
plt.title('Survival Based on Family Size')
plt.show()

"""# 7. Feature Engineering"""

# Create age groups
bins = [0, 12, 18, 40, 60, 80]
labels = ['Child', 'Teenager', 'Adult', 'Middle-aged', 'Senior']
titanic_data['age_group'] = pd.cut(titanic_data['age'], bins=bins, labels=labels)

# Visualize
sns.countplot(x='age_group', hue='survived', data=titanic_data, palette='magma')
plt.title('Survival by Age Group')
plt.show()

"""# 8. Correlation Heatmap"""

plt.figure(figsize=(12, 8))
numeric_features = titanic_data.select_dtypes(include=np.number)
sns.heatmap(numeric_features.corr(), annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Feature Correlation Heatmap')
plt.show()

"""# **Key Findings:**

- **Gender:** Women were prioritized in rescue efforts.
- **Class:** Wealth equated to better survival odds.
- **Age:** Children had favorable outcomes; elderly did not.
- **Embarkation:** Cherbourg passengers had highest survival rates.
- **Family:** Small families fared better than large or solo passengers.

"""